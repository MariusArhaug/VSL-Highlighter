{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "fileTypes": ["vsl"],
  "name": "vsl",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#reserved-words"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#function_calls"
    },
    {
      "captures": {}
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "begin": "//",
          "end": "\\n",
          "name": "comment.line.double-slash"
        }
      ]
    },
    "paren-expression": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "entity.name.function.vsl"
            }
          },
          "match": "\\b(\\w+)(?:\\s+([a-zA-Z]([a-zA-Z0-9])*)?\\s*(\\()",
          "name": "punctuation.definition.parameters.tpl"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.vsl",
          "match": "\\b(func|begin|end|return|continue|if|then|else|while|do|var)\\b"
        }
      ]
    },
    "function_calls": {
      "patterns": [
        {
          "begin": "((?:[[:alpha:]])(?:[[:word:]_!])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?\\.?(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.vsl"
            }
          },
          "end": "\\)(('|(\\.'))*\\.?')?",
          "endCaptures": {
            "0": {
              "name": "meta.bracket.vsl"
            },
            "1": {
              "name": "keyword.operator.transposed-func.vsl"
            }
          },
          "patterns": [
            {
              "match": "\\bfor\\b",
              "name": "keyword.control.vsl"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "function_decl": {},

    "reserved-words": {
      "match": "\\b(print)\\b",
      "name": "entity.name.function.member.vsl"
    },
    "operators": {
      "patterns": [
        {
          "match": "%=|\\+=|\\*=|(?<!\\()/=|:=|-=",
          "name": "keyword.operator.assingment.compund.vsl"
        },
        {
          "match": "\\+|/|\\*|-|\\:",
          "name": "keyword.operator.vsl"
        },
        {
          "match": "&|\\||\\~",
          "name": "keyword.operator.logical.vsl"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.vsl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.vsl",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b[0-9]+"
        }
      ]
    }
  },
  "scopeName": "source.vsl"
}
